name: 'Release'
description: 'update contents of the repo for a global or local release'
inputs:
  release:
    description: release type
    required: true

  registry_url:
    description: dockerhub registry url
    required: true

  service_image_name:
    description: the name of the image to be updated
    required: true
        
  tag:
    description: version tag of the image
    required: true

runs:
  using: "composite"

  steps:
    - name: Set dynamic environment variables
      id: var
      shell: bash
      run: |
        case ${{ inputs.service_image_name }} in

          monitoring-manager)
            HELM_CHART_NAME=manager
            SERVICE_TAG=MANAGER_TAG
            ;;

          profiler)
            HELM_CHART_NAME=profiler
            SERVICE_TAG=PROFILER_TAG
            ;;

          shell-ui)
            HELM_CHART_NAME=shell-ui
            SERVICE_TAG=UI_TAG
            ;;

          drift-report-plugin)
            HELM_CHART_NAME=drift-report-plugin
            SERVICE_TAG=DRIFT_REPORT_PLUGIN_TAG
            ;;

          *)
            echo "unknown IMAGE_NAME"
            exit 1
            ;;
        esac
        
        echo ::set-output name=HELM_CHART_NAME::$HELM_CHART_NAME
        echo ::set-output name=SERVICE_TAG::$SERVICE_TAG
        
    - name: Update ${{ steps.var.outputs.HELM_CHART_NAME }}/values.yaml
      run: "cd helm && sed -i \"s/.*full:.*/  full: ${{ inputs.registry_url }}\\/${{ inputs.service_image_name }}:${{ inputs.tag }}/g\" ${{ steps.var.outputs.HELM_CHART_NAME }}/values.yaml"
      shell: bash

    - name: Update dev.yaml
      run: "cd helm && sed -i \"s/.*full:.*${{ inputs.service_image_name }}.*/    full: ${{ inputs.registry_url }}\\/${{ inputs.service_image_name }}:${{ inputs.tag }}/g\" dev.yaml"
      shell: bash
    
    - name: Run helm-docs
      run: |
        GOBIN=$PWD GO111MODULE=on go get github.com/norwoodj/helm-docs/cmd/helm-docs
        ./helm-docs --sort-values-order file
        rm helm-docs
      shell: bash

    - name: Update docker-compose service image
      run: "cd docker-compose && sed -i \"s/${{ steps.var.outputs.SERVICE_TAG }}=.*/${{ steps.var.outputs.SERVICE_TAG }}=${{ inputs.tag }}/g\" .env"
      shell: bash
