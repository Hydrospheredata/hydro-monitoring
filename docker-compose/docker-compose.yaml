version: '3.8'

services:
  db:
    container_name: db
    environment:
      POSTGRESQL_DATABASE: monitoring
      POSTGRESQL_PASSWORD: root
      POSTGRESQL_USERNAME: root
    healthcheck:
      interval: 1s
      retries: 10
      test:
      - CMD
      - pg_isready
      - -U
      - root
      - -d
      - dbname=monitoring
      - -h
      - 127.0.0.1
      timeout: 10s
    image: bitnami/postgresql:${POSTGRESQL_TAG}
    mem_limit: 1g
    volumes:
    - ./postgres:/docker-entrypoint-initdb.d:rw

  drift-report-plugin:
    container_name: drift-report-plugin
    depends_on:
      monitoring-manager:
        condition: service_healthy
    environment:
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      DB_CONNECTION_STRING: postgresql://root:root@db:5432/stat_plugin
      ENDPOINT_OVERRIDE: http://minio:9000
      HTTP_PORT: '5000'
      MANAGER_ADDR: monitoring-manager:8081
      SELF_ADDR: http://drift-report-plugin:5000
    image: hydrosphere/drift-report-plugin:${DRIFT_REPORT_PLUGIN_TAG}
    mem_limit: 1g

  minio:
    container_name: minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    healthcheck:
      interval: 1s
      retries: 10
      test:
      - CMD
      - curl
      - -f 
      - "http://localhost:9000/minio/health/live"
      timeout: 10s
    image: bitnami/minio:${MINIO_TAG}
    ports:
    - published: 9000
      target: 9000
    - published: 9001
      target: 9001

  monitoring-manager:
    command: -Dconfig.override_with_env_vars=true
    container_name: monitoring-manager
    cpus: 1
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      pushgateway:
        condition: service_started
    environment:
      AWS_REGION: us-west-1
    healthcheck:
      interval: 5s
      retries: 6
      test:
      - CMD
      - grpc_health_probe
      - -addr=localhost:8081
      timeout: 30s
    image: hydrosphere/monitoring-manager:${MANAGER_TAG}
    mem_limit: 2g
    ports:
    - published: 8080
      target: 8080
    - published: 8081
      target: 8081

  profiler:
    container_name: profiler
    depends_on:
      monitoring-manager:
        condition: service_healthy
    environment:
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      HTTP_HOST: profiler
    image: hydrosphere/profiler:${PROFILER_TAG}
    mem_limit: 1g

  shell-ui:
    container_name: shell-ui
    depends_on:
      monitoring-manager:
        condition: service_healthy
    environment:
      MANAGER_HOST: monitoring-manager
      MANAGER_HTTP_PORT: '8080'
    image: hydrosphere/shell-ui:${UI_TAG}
    mem_limit: 200m
    ports:
    - published: 80
      target: 8080
